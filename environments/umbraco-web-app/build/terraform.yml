# Downloaded from https://github.com/JamesDLD/terraform

# Terraform
parameters:
  version: "" #Terraform version to use
  path: "" #Terraform scripts location path within the current repository
  package_name: "" #Name of the Terraform package
  backend_secret_file_id: "no_secret_file_id_provided" #Azure DevOps Library backend file name (used for the Terraform init cmdlet)
  backend_file_path: "" #Local backend file location (used for the Terraform init cmdlet)
  main_secret_file_id: "no_secret_file_id_provided" #Azure DevOps Library main file name (used for the Terraform plan, apply and destroy cmdlet)
  main_file_path: "" #Local main file location (used for the Terraform plan, apply and destroy cmdlet)
  terraform_init: false #Decide to perform a Terraform init
  terraform_plan: false #Decide to perform a Terraform plan
  terraform_apply: false #Decide to perform a Terraform apply
  terraform_destroy: false #Decide to perform a Terraform destroy
  artifact_path: "" #Fill in the Artifact path location when Terraform applied is asked (usually it's $(Pipeline.Workspace)/$(artifact_name))

steps:
  
  # -
  # - Prerequisites
  # -
  
  - script: |
      if [ -z "${{ parameters.version }}" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"version\""
        echo "##vso[task.complete result=Failed;]"
      fi
      if [ -z "${{ parameters.package_name }}" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"package_name\""
        echo "##vso[task.complete result=Failed;]"
      fi
      mkdir -p ./ArtifactPublishLocation
    displayName: ${{ parameters.package_name }} - Check for required parameters

  - task: TerraformInstaller@0
    displayName: "${{ parameters.package_name }} - Use Terraform ${{ parameters.version }}"
    inputs:
      terraformVersion: ${{ parameters.version }}

  - bash: |
      if [ -f "${{ parameters.artifact_path }}/${{ parameters.package_name }}.tar.gz" ]; then
          echo '##vso[task.setvariable variable=package_available]yes'
      else
          echo '##vso[task.setvariable variable=package_available]no'
      fi
    condition: or(${{ parameters.terraform_apply }}, ${{ parameters.terraform_destroy }})
    displayName: ${{ parameters.package_name }} - Checking if the package ${{ parameters.package_name }} is available

  - task: ExtractFiles@1
    condition: and(eq(variables['package_available'], 'yes'), or(${{ parameters.terraform_apply }}, ${{ parameters.terraform_destroy }})) # this task will only run if the package is available
    displayName: "${{ parameters.package_name }} - Extract files for package ${{ parameters.package_name }}"
    inputs:
      archiveFilePatterns: "${{ parameters.artifact_path }}/${{ parameters.package_name }}.tar.gz"
      destinationFolder: "./${{ parameters.package_name }}"

  # -
  # - Terraform Init
  # -

  - script: |
      if [ "${{ parameters.backend_file_path }}" != "" ] && [ "${{ parameters.backend_secret_file_id }}" != "" ] ; 
      then
        terraform init -backend-config="${{ parameters.backend_file_path }}" -backend-config="$(Agent.TempDirectory)/${{ parameters.backend_secret_file_id }}" -input=false -reconfigure
      elif [ "${{ parameters.backend_file_path }}" == "" ] && [ "${{ parameters.backend_secret_file_id }}" != "" ] ; 
      then
        terraform init -backend-config="$(Agent.TempDirectory)/${{ parameters.backend_secret_file_id }}" -input=false -reconfigure
      else
        terraform init -input=false -reconfigure
      fi
    displayName: "${{ parameters.package_name }} - Terraform Init"
    workingDirectory: ${{ parameters.path }}
    condition: ${{ parameters.terraform_init }} # this task will only run if terraform_init equals true

  # -
  # - Terraform Plan
  # -

  - script: |
      if [ "${{ parameters.main_file_path }}" != "" ] ; 
      then
        OUTPUT=$(terraform plan -var-file="${{ parameters.main_file_path }}" -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -out="./out_plan_file" -input=false -detailed-exitcode)
      else
        OUTPUT=$(terraform plan -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -out="./out_plan_file" -input=false -detailed-exitcode)
      fi

      OUT=$?
      if [ $OUT -eq 0 ];then
          echo '##vso[task.setvariable variable=terraform_plan_exitcode]0'
          echo "${Correct} No changes. Infrastructure is up-to-date!"
      elif [ $OUT -eq 1 ];then
          echo '##vso[task.setvariable variable=terraform_plan_exitcode]1'
          echo "Terraform planned has failed!"
          exit 1
      elif [ $OUT -eq 2 ];then
          echo '##vso[task.setvariable variable=terraform_plan_exitcode]2'
          echo "${Warning}Changes have been noticed!"
          terraform show ./out_plan_file
      else
          echo "Terraform planned has failed!"
          exit 1
      fi

      if [[ $OUTPUT =~ "[DEPRECATED]" ]]; then
          echo "##vso[task.logissue type=warning;]A Terraform property has been deprecated."
          echo "##vso[task.complete result=SucceededWithIssues;]"
          if [ "${{ parameters.main_file_path }}" != "" ] ; 
          then
            terraform plan -var-file="${{ parameters.main_file_path }}" -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -input=false
          else
            terraform plan -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -input=false
          fi
      fi
    displayName: "${{ parameters.package_name }} - Terraform Plan"
    workingDirectory: ${{ parameters.path }}
    condition: ${{ parameters.terraform_plan }} # this task will only run if terraform_plan equals true

  - script: |
      echo "Compressing ${{ parameters.path }} directory ..."
      tar -czf ${{ parameters.package_name }}.tar.gz -C ${{ parameters.path }} .
      mkdir -p ./ArtifactPublishLocation
      echo "Moving this archive directory to this location ./ArtifactPublishLocation ..."
      mv -f ${{ parameters.package_name }}.tar.gz ./ArtifactPublishLocation/${{ parameters.package_name }}.tar.gz
    displayName: "${{ parameters.package_name }} - Compress ${{ parameters.path }} package"
    condition: and(${{ parameters.terraform_init }}, eq(variables['terraform_plan_exitcode'], '2')) # this task will only run if terrafrom has prompted for changes and a terraform apply has been asked

  # -
  # - Terraform Apply
  # -

  - script: terraform apply "./out_plan_file"
    condition: and(${{ parameters.terraform_apply }}, eq(variables['package_available'], 'yes')) # this task will only run if the package is available and a Terraform apply has been asked
    displayName: "${{ parameters.package_name }} - Terraform Apply"
    workingDirectory: "./${{ parameters.package_name }}"

  # -
  # - Terraform Destroy
  # - Commented out not to freak out or 
  # - even let anyone destroinfra in production
  # -

  # - script: |
  #     if [ "${{ parameters.main_file_path }}" != "" ] ; 
  #     then
  #       terraform destroy -var-file="${{ parameters.main_file_path }}" -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -auto-approve
  #     else
  #       terraform destroy -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -auto-approve
  #     fi
  #   condition: and(${{ parameters.terraform_destroy }}, eq(variables['package_available'], 'yes')) # this task will only run if the package is available and a Terraform destroy has been asked
  #   displayName: "${{ parameters.package_name }} - Terraform Destroy"
  #   workingDirectory: "./${{ parameters.package_name }}"
