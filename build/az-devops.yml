# Deploys an opinionated terraform project to an azure subscription

# Requirements (create using ./az-setup.sh)
# $(environment) pipeline parameter
# service connection created in Azure Devops
# azure storage account

# Assumes a folder structure:
# tf-envs/
# ├── $(environment)/
# │   ├── main.tf
# │   ├── variables.tf
# ├── tfvars/
# │   ├── $(environment).tfvars

variables:
- name: serviceConnectionName
  value: 'tf-sp-dev-mto-test'
- name:  tfvarsFile
  value: $(environment).tfvars
- name: tfBackendResourceGroupName
  value: rg-tf-backend-storage
- name: tfBackendStorageAccountName
  value: sttfbackend34587
- name:  tfBackendStorageContainerName
  value: tf-backend-files
- name:  tfBackendFileName  
  value: $(environment)-tf-state-file

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
#PARAMETER VALIDATION
- script: |
    set +e
    if [ -z $(environment) ]; then
    echo "target environment not specified";
    exit 1;
    fi
    echo "environment is:" $(environment)

#AZURE LOGIN
#TERRAFORM INIT, PLAN & APPLY
- task: AzureCLI@2
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login --service-principal -u $($env:servicePrincipalId) -p $($env:servicePrincipalKey) --tenant $($env:tenantId)

      echo '#######Terraform Init########'
      terraform init -backend-config="resource_group_name=$(tfBackendResourceGroupName)" -backend-config="storage_account_name=$(tfBackendStorageAccountName)" -backend-config="container_name=$(tfBackendStorageContainerName)" -backend-config="key=$(tfBackendFileName)"  
    
      echo '#######Terraform Plan########'
      terraform plan -var-file=../tf-vars/$(tfvarsFile) -out="out.plan"    
    
      echo '#######Terraform Apply########'
      terraform apply out.plan    
    addSpnToEnvironment: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/tf-envs/$(environment)'
  displayName: 'az login; terraform init; terraform plan; terraform apply'
