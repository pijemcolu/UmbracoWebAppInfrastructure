parameters:
- name: environment
  type: string
  default: 'dev'
- name: umbracoSemanticVersion
  type: string
  default: '8.6.0'
- name: instanceIdentifier
  type: string
  default: 'dev-test-random-mto'

variables:
- name: serviceConnectionName
  value: 'tf-sp-dev-mto-test'
- name:  tfvarsFile
  value: ${{ parameters.environment }}.tfvars
- name: tfBackendResourceGroupName
  value: rg-tf-backend-storage
- name: tfBackendStorageAccountName
  value: sttfbackend34587
- name:  tfBackendStorageContainerName
  value: tf-backend-files
- name:  tfBackendFileName  
  value: ${{ parameters.environment }}-tf-state-file

steps:
#PARAMETER VALIDATION
- script: |
    set +e
    if [ -z ${{ parameters.environment }} ]; then
    echo "target environment not specified";
    exit 1;
    fi
    echo "environment is:" ${{ parameters.environment }}
  displayName: 'Validate parameters'

#TERRAFORM INIT, PLAN & APPLY
- task: AzureCLI@2
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo '#######Setting Azure Service Principal Environment Variables########'
      export ARM_CLIENT_ID=$servicePrincipalId
      export ARM_CLIENT_SECRET=$servicePrincipalKey
      export ARM_SUBSCRIPTION_ID=$(az account show | jq '.id' -r)
      export ARM_TENANT_ID=$tenantId

      echo '#######Terraform Init########'
      terraform init -backend-config="resource_group_name=$(tfBackendResourceGroupName)" -backend-config="storage_account_name=$(tfBackendStorageAccountName)" -backend-config="container_name=$(tfBackendStorageContainerName)" -backend-config="key=$(tfBackendFileName)"  
    
      echo '#######Terraform Plan########'
      terraform plan -var-file=../tf-vars/$(tfvarsFile) \
        -out="out.plan" \
        -var='package_source_url=http://umbracoreleases.blob.core.windows.net/download/UmbracoCms.${{ parameters.umbracoSemanticVersion }}.zip' \
        -var='instance_id=${{ parameters.instanceIdentifier }}'    
    
      echo '#######Terraform Apply########'
      terraform apply out.plan 
    addSpnToEnvironment: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/tf-envs/${{ parameters.environment }}'
  displayName: 'Terraform apply'


#DELETE RESOURCE GROUP
- task: AzureCLI@2
  inputs:
    azureSubscription: '$(serviceConnectionName)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo '#######Destroying resource group########'

      az group delete -n rg-test-${{ parameters.instanceIdentifier }} --yes
  displayName: 'Delete Azure resources'
